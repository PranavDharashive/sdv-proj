---
- name: Create MinIO storage directory
  file:
    path: /mnt/minio-storage/
    state: directory
    mode: '0777'

- name: Get Kubernetes node name
  command: kubectl get nodes -o jsonpath='{.items[0].metadata.name}'
  register: k8s_node_name
  changed_when: false
  environment:
    KUBECONFIG: "/root/.kube/config"

- name: Debug - Kubernetes node name for MinIO PV
  debug:
    var: k8s_node_name.stdout

- name: Create minio namespace
  kubernetes.core.k8s:
    name: minio
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "{{ ansible_user_dir }}/.kube/config"

- name: Get existing MinIO PersistentVolume info
  kubernetes.core.k8s_info:
    kind: PersistentVolume
    name: minio-pv
    kubeconfig: "{{ ansible_user_dir }}/.kube/config"
  register: existing_minio_pv_info
  ignore_errors: yes

- name: Debug - Existing MinIO PV info (full variable)
  debug:
    var: existing_minio_pv_info

- name: Debug - Type of existing_minio_pv_info.resources
  debug:
    msg: "Type of existing_minio_pv_info.resources: {{ existing_minio_pv_info.resources | type_debug }}"

- name: Debug - Content of existing_minio_pv_info.resources
  debug:
    var: existing_minio_pv_info.resources

- name: Set fact for normalized existing_minio_pv_resources
  set_fact:
    normalized_existing_minio_pv_resources: "{{ existing_minio_pv_info.resources | default([]) }}"

- name: Render MinIO PersistentVolume template
  template:
    src: "{{ role_path }}/templates/minio-pv.yml.j2"
    dest: "/tmp/minio-pv.yml"

- name: Deploy MinIO PersistentVolume
  kubernetes.core.k8s:
    state: present
    src: "/tmp/minio-pv.yml"
    kubeconfig: "{{ ansible_user_dir }}/.kube/config"
  register: minio_pv_deploy_result
  ignore_errors: yes

- name: Fail if MinIO PV deployment failed due to immutable field
  fail:
    msg: |
      Failed to deploy MinIO PersistentVolume 'minio-pv'.
      Error: {{ minio_pv_deploy_result.msg }}
      This usually means the PV already exists with an incorrect nodeAffinity, which is immutable.
      If this PV contains important data, please back it up manually.
      Then, delete the existing PV and PVC (kubectl delete pv minio-pv pvc minio-pvc -n minio) and re-run the playbook.
  when: minio_pv_deploy_result.failed and 'field is immutable' in minio_pv_deploy_result.msg

- name: Deploy MinIO PersistentVolumeClaim
  kubernetes.core.k8s:
    state: present
    src: "{{ role_path }}/files/minio-pvc.yml"
    kubeconfig: "{{ ansible_user_dir }}/.kube/config"

- name: Debug - Get MinIO PVC info before wait
  command: kubectl get pvc minio-pvc -n minio -o json
  register: minio_pvc_raw_info
  changed_when: false
  failed_when: false
  environment:
    KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"

- name: Debug - Print MinIO PVC raw info
  debug:
    var: minio_pvc_raw_info.stdout

- name: Wait for MinIO PVC to be bound
  kubernetes.core.k8s_info:
    kind: PersistentVolumeClaim
    name: minio-pvc
    namespace: minio
    kubeconfig: "{{ ansible_user_dir }}/.kube/config"

- name: Render MinIO deployment template
  template:
    src: "{{ role_path }}/templates/minio-deployment.yml.j2"
    dest: "/tmp/minio-deployment.yml"

- name: Deploy MinIO
  kubernetes.core.k8s:
    state: present
    src: "/tmp/minio-deployment.yml"
    kubeconfig: "{{ ansible_user_dir }}/.kube/config"

- name: Debug - Get MinIO PV info
  command: kubectl get pv minio-pv -o json
  register: minio_pv_info
  changed_when: false
  failed_when: false
  environment:
    KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"

- name: Debug - Print MinIO PV info
  debug:
    var: minio_pv_info.stdout

- name: Debug - Get MinIO PVC info
  command: kubectl get pvc minio-pvc -n minio -o json
  register: minio_pvc_info
  changed_when: false
  failed_when: false
  environment:
    KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"

- name: Debug - Print MinIO PVC info
  debug:
    var: minio_pvc_info.stdout

- name: Debug - Get MinIO deployment info
  command: kubectl get deployment minio-deployment -n minio -o json
  register: minio_deployment_info
  changed_when: false
  failed_when: false
  environment:
    KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"

- name: Debug - Print MinIO deployment info
  debug:
    var: minio_deployment_info.stdout

- name: Wait for MinIO deployment to be ready
  kubernetes.core.k8s_info:
    kind: Deployment
    name: minio-deployment
    namespace: minio
    kubeconfig: "{{ ansible_user_dir }}/.kube/config"

- name: Get MinIO pods
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: minio
    label_selectors:
      - app=minio
    kubeconfig: "{{ ansible_user_dir }}/.kube/config"
  register: minio_pods

- name: Debug - MinIO pods info
  debug:
    var: minio_pods

- name: Get MinIO pod events
  command: kubectl describe pod {{ minio_pods.resources[0].metadata.name }} -n minio
  register: minio_pod_events
  changed_when: false
  failed_when: false
  environment:
    KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
  when: minio_pods.resources | length > 0

- name: Debug - MinIO pod events
  debug:
    var: minio_pod_events.stdout_lines
  when: minio_pods.resources | length > 0

- name: Fail if MinIO pods are not running
  fail:
    msg: "MinIO pods are not running"
  when: minio_pods.resources | length == 0 or minio_pods.resources[0].status.phase != 'Running' or not minio_pods.resources[0].status.containerStatuses[0].ready
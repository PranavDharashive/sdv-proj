---
- name: Load kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Configure sysctl for Kubernetes
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { key: 'net.ipv4.ip_forward', value: '1' }
    - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

- name: Reload sysctl
  command: sysctl --system



- name: Update apt package index
  apt:
    update_cache: yes

- name: Create /etc/apt/keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker GPG key
  shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc

- name: Set permissions on Docker GPG key
  file:
    path: /etc/apt/keyrings/docker.asc
    mode: 'a+r'

- name: Add Docker apt repository
  shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

- name: Install Docker packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - docker-ce
    - docker-ce-cli
    - containerd.io

- name: Create docker daemon config directory
  file:
    path: /etc/docker
    state: directory

- name: Configure Docker to use systemd cgroup driver
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }

- name: Restart Docker
  systemd:
    name: docker
    state: restarted
    enabled: yes

- name: Create SSL directory
  file:
    path: /etc/ssl/private
    state: directory

- name: Generate self-signed SSL certificate for HAProxy
  command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/haproxy.pem -out /etc/ssl/private/haproxy.pem -subj "/C=US/ST=CA/L=San Francisco/O=MyOrg/OU=MyDept/CN=mydomain.com"
  args:
    creates: /etc/ssl/private/haproxy.pem

- name: Install HAProxy
  apt:
    name: haproxy
    state: present

- name: Deploy HAProxy configuration
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg

- name: Enable and start HAProxy service
  systemd:
    name: haproxy
    state: restarted
    enabled: yes

- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg
    - lsb-release
    - python3-pip

- name: Install Kubernetes Python client
  pip:
    name: kubernetes
    executable: pip3

- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory

- name: Generate default containerd config if it doesn't exist
  shell: containerd config default | sudo tee /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Configure containerd to use systemd cgroup driver
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s*SystemdCgroup = false'
    line: '            SystemdCgroup = true'
    state: present

- name: Enable CRI plugin in containerd
  replace:
    path: /etc/containerd/config.toml
    regexp: 'disabled_plugins = \["cri"\]'
    replace: 'disabled_plugins = []'

- name: Restart containerd
  systemd:
    name: containerd
    state: restarted
    enabled: yes

- name: Add Kubernetes GPG key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0] }}.{{ k8s_version.split('.')[1] }}/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc

- name: Add Kubernetes apt repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version.split('.')[0] }}.{{ k8s_version.split('.')[1] }}/deb/ /"
    state: present

- name: Install Kubernetes packages
  apt:
    name: "{{ item }}={{ k8s_version }}-*"
    state: present
    allow_downgrade: yes
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable and start kubelet service
  systemd:
    name: kubelet
    enabled: yes
    state: started